import requests
import json
import time

# Configuration pour LocalAI
LOCALAI_URL = "http://127.0.0.1:8080/v1/chat/completions"
LOCALAI_MODEL = "mistral-7b-instruct-v0.3"

# Configuration pour Gemini
GEMINI_API_KEY = "AIzaSyDFjy8wVBrd4DUM3XjfbvTO4mRBSnTGCuw"
GEMINI_MODEL = "gemini-2.0-flash"

# Message syst√®me commun pour guider les mod√®les
SYSTEM_MESSAGE = """Tu es un expert en programmation Python et en p√©dagogie. 
Tu aides √† cr√©er des exercices de programmation pour des √©l√®ves de lyc√©e et √† √©valuer leur code.

IMPORTANT: Tu dois formater tes r√©ponses en HTML pur pour un affichage correct dans un navigateur.

Quand tu cr√©es des exercices:
1. Utilise une structure claire avec des titres et sous-titres bien format√©s (<h1>, <h2>, <h3>)
2. Fournis un squelette de code √† trous avec des commentaires "# √Ä COMPL√âTER" ou "# VOTRE CODE ICI"
3. Inclus des jeux de tests avec des messages de r√©ussite (‚úÖ) ou d'√©chec (‚ùå)
4. Adapte la difficult√© au niveau de l'√©l√®ve (Premi√®re ou Terminale)
5. Sois pr√©cis dans tes explications et tes attentes

Quand tu √©values du code:
1. V√©rifie si le code r√©pond correctement √† l'√©nonc√©
2. Identifie les erreurs potentielles (syntaxe, logique, etc.)
3. Sugg√®re des am√©liorations (optimisation, lisibilit√©, etc.)
4. Donne des conseils pour aller plus loin
5. Sois encourageant et constructif dans tes retours

Utilise uniquement des balises HTML standard pour le formatage:
- <h1>, <h2>, <h3> pour les titres
- <p> pour les paragraphes
- <ul> et <li> pour les listes
- <pre><code class="language-python">...</code></pre> pour les blocs de code
- <strong> pour le texte en gras
- <em> pour le texte en italique
- <span class="text-success">‚úÖ Texte</span> pour les messages de succ√®s
- <span class="text-danger">‚ùå Texte</span> pour les messages d'erreur
- <span class="text-info">üí° Texte</span> pour les suggestions
- <span class="text-primary">üöÄ Texte</span> pour les conseils d'am√©lioration

Ne m√©lange pas HTML et Markdown. Utilise uniquement du HTML pur.
"""

# Classe de base pour les fournisseurs d'IA
class AIProvider:
    def generate_text(self, prompt, max_tokens=1500, temperature=0.7):
        """
        M√©thode √† impl√©menter par les classes enfants
        """
        raise NotImplementedError("Cette m√©thode doit √™tre impl√©ment√©e par les classes enfants")
    
    def evaluate_code(self, code, enonce, max_tokens=1500, temperature=0.7):
        """
        √âvalue le code Python soumis par rapport √† un √©nonc√©.
        
        Args:
            code (str): Le code Python √† √©valuer.
            enonce (str): L'√©nonc√© de l'exercice.
            max_tokens (int, optional): Nombre maximum de tokens √† g√©n√©rer.
            temperature (float, optional): Temp√©rature pour la g√©n√©ration.
            
        Returns:
            str: L'√©valuation du code.
        """
        prompt = f"""
        √âvalue le code Python suivant par rapport √† l'√©nonc√© donn√©:
        
        √ânonc√©:
        {enonce}
        
        Code soumis:
        ```python
        {code}
        ```
        
        IMPORTANT: Ton √©valuation doit √™tre format√©e en HTML pur pour un affichage correct dans un navigateur.
        
        Ton √©valuation doit inclure:
        1. Un titre principal avec <h1>√âvaluation du code</h1>
        2. Une section sur la conformit√© √† l'√©nonc√© avec <h2>Conformit√© √† l'√©nonc√©</h2>
        3. Une section sur les erreurs potentielles avec <h2>Erreurs potentielles</h2>
        4. Une section sur les suggestions d'am√©lioration avec <h2>Suggestions d'am√©lioration</h2>
        5. Une section sur les conseils pour aller plus loin avec <h2>Pour aller plus loin</h2>
        
        Utilise uniquement des balises HTML standard pour le formatage:
        - <h1>, <h2>, <h3> pour les titres
        - <p> pour les paragraphes
        - <ul> et <li> pour les listes
        - <pre><code class="language-python">...</code></pre> pour les blocs de code
        - <strong> pour le texte en gras
        - <em> pour le texte en italique
        
        Utilise des √©mojis et des classes pour rendre ton √©valuation plus visuelle:
        - <span class="text-success">‚úÖ Texte</span> pour les points positifs
        - <span class="text-danger">‚ùå Texte</span> pour les erreurs ou probl√®mes
        - <span class="text-info">üí° Texte</span> pour les suggestions
        - <span class="text-primary">üöÄ Texte</span> pour les conseils d'am√©lioration
        
        Ne donne pas la solution compl√®te, mais guide l'√©l√®ve vers la bonne direction.
        Sois encourageant et constructif dans tes retours.
        
        Ne m√©lange pas HTML et Markdown. Utilise uniquement du HTML pur.
        """
        
        return self.generate_text(prompt, max_tokens, temperature)

# Fournisseur LocalAI
class LocalAIProvider(AIProvider):
    def __init__(self, url=LOCALAI_URL, model=LOCALAI_MODEL):
        self.url = url
        self.model = model
    
    def generate_text(self, prompt, max_tokens=1500, temperature=0.7, retry_count=2, retry_delay=1):
        """
        G√©n√®re du texte en utilisant l'API LocalAI.
        
        Args:
            prompt (str): Le prompt √† envoyer √† l'API.
            max_tokens (int, optional): Nombre maximum de tokens √† g√©n√©rer. Par d√©faut 1500.
            temperature (float, optional): Temp√©rature pour la g√©n√©ration. Par d√©faut 0.7.
            retry_count (int, optional): Nombre de tentatives en cas d'√©chec. Par d√©faut 2.
            retry_delay (int, optional): D√©lai entre les tentatives en secondes. Par d√©faut 1.
            
        Returns:
            str: Le texte g√©n√©r√© par l'API.
        """
        attempts = 0
        
        while attempts <= retry_count:
            try:
                # Pr√©parer les donn√©es pour l'API
                data = {
                    "model": self.model,
                    "messages": [
                        {"role": "system", "content": SYSTEM_MESSAGE},
                        {"role": "user", "content": prompt}
                    ],
                    "max_tokens": max_tokens,
                    "temperature": temperature
                }
                
                # Envoyer la requ√™te √† l'API
                response = requests.post(self.url, json=data, timeout=60)
                
                # V√©rifier si la requ√™te a r√©ussi
                if response.status_code == 200:
                    result = response.json()
                    # Extraire le texte g√©n√©r√©
                    generated_text = result["choices"][0]["message"]["content"]
                    return generated_text
                else:
                    print(f"Erreur lors de la requ√™te √† LocalAI: {response.status_code}")
                    print(f"D√©tails: {response.text}")
                    
                    # Si c'est la derni√®re tentative, retourner un message d'erreur
                    if attempts == retry_count:
                        return f"<h1>Erreur</h1><p>Erreur lors de la g√©n√©ration du texte. Code: {response.status_code}. Veuillez r√©essayer plus tard.</p>"
                    
                    # Sinon, attendre et r√©essayer
                    time.sleep(retry_delay)
                    attempts += 1
                    
            except requests.exceptions.Timeout:
                print("Timeout lors de la requ√™te √† LocalAI")
                if attempts == retry_count:
                    return "<h1>Erreur</h1><p>Erreur: Le serveur LocalAI met trop de temps √† r√©pondre. Veuillez r√©essayer plus tard.</p>"
                time.sleep(retry_delay)
                attempts += 1
                
            except Exception as e:
                print(f"Exception lors de la requ√™te √† LocalAI: {str(e)}")
                if attempts == retry_count:
                    return f"<h1>Erreur</h1><p>Erreur lors de la g√©n√©ration du texte: {str(e)}</p>"
                time.sleep(retry_delay)
                attempts += 1

# Fournisseur Gemini
class GeminiProvider(AIProvider):
    def __init__(self, api_key=GEMINI_API_KEY, model=GEMINI_MODEL):
        self.api_key = api_key
        self.model = model
        self.base_url = "https://generativelanguage.googleapis.com/v1beta/models"
    
    def generate_text(self, prompt, max_tokens=1500, temperature=0.7, retry_count=2, retry_delay=1):
        """
        G√©n√®re du texte en utilisant l'API Gemini.
        
        Args:
            prompt (str): Le prompt √† envoyer √† l'API.
            max_tokens (int, optional): Nombre maximum de tokens √† g√©n√©rer. Par d√©faut 1500.
            temperature (float, optional): Temp√©rature pour la g√©n√©ration. Par d√©faut 0.7.
            retry_count (int, optional): Nombre de tentatives en cas d'√©chec. Par d√©faut 2.
            retry_delay (int, optional): D√©lai entre les tentatives en secondes. Par d√©faut 1.
            
        Returns:
            str: Le texte g√©n√©r√© par l'API.
        """
        attempts = 0
        
        # Construire le prompt complet avec le message syst√®me
        full_prompt = f"{SYSTEM_MESSAGE}\n\n{prompt}"
        
        while attempts <= retry_count:
            try:
                # URL de l'API Gemini
                url = f"{self.base_url}/{self.model}:generateContent?key={self.api_key}"
                
                # Corps de la requ√™te
                payload = {
                    "contents": [{
                        "parts": [{
                            "text": full_prompt
                        }]
                    }],
                    "generationConfig": {
                        "temperature": temperature,
                        "maxOutputTokens": max_tokens
                    }
                }
                
                # En-t√™tes de la requ√™te
                headers = {
                    "Content-Type": "application/json"
                }
                
                # Envoi de la requ√™te POST
                response = requests.post(url, headers=headers, data=json.dumps(payload), timeout=60)
                
                # V√©rification de la r√©ponse
                if response.status_code == 200:
                    # Extraction du texte de la r√©ponse
                    result = response.json()
                    return result['candidates'][0]['content']['parts'][0]['text']
                else:
                    print(f"Erreur lors de la requ√™te √† Gemini: {response.status_code}")
                    print(f"D√©tails: {response.text}")
                    
                    # Si c'est la derni√®re tentative, retourner un message d'erreur
                    if attempts == retry_count:
                        return f"<h1>Erreur</h1><p>Erreur lors de la g√©n√©ration du texte. Code: {response.status_code}. Veuillez r√©essayer plus tard.</p>"
                    
                    # Sinon, attendre et r√©essayer
                    time.sleep(retry_delay)
                    attempts += 1
            
            except requests.exceptions.Timeout:
                print("Timeout lors de la requ√™te √† Gemini")
                if attempts == retry_count:
                    return "<h1>Erreur</h1><p>Erreur: Le serveur Gemini met trop de temps √† r√©pondre. Veuillez r√©essayer plus tard.</p>"
                time.sleep(retry_delay)
                attempts += 1
                
            except Exception as e:
                print(f"Exception lors de la requ√™te √† Gemini: {str(e)}")
                if attempts == retry_count:
                    return f"<h1>Erreur</h1><p>Erreur lors de la g√©n√©ration du texte: {str(e)}</p>"
                time.sleep(retry_delay)
                attempts += 1

# Fonction pour obtenir le fournisseur d'IA appropri√©
def get_ai_provider(provider_name="localai"):
    """
    Retourne l'instance du fournisseur d'IA appropri√©.
    
    Args:
        provider_name (str): Le nom du fournisseur d'IA ('localai' ou 'gemini').
        
    Returns:
        AIProvider: Une instance du fournisseur d'IA.
    """
    if provider_name.lower() == "gemini":
        return GeminiProvider()
    else:
        return LocalAIProvider()
